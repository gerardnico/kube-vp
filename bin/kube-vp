#!/usr/bin/env bash


# shellcheck source=../..//bash-lib/lib/bashlib-error.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-error.sh"
error::set_strict_mode
error::set_trap
# shellcheck source=../..//bash-lib/lib/bashlib-echo.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-echo.sh"
# shellcheck source=../..//bash-lib/lib/bashlib-doc.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-doc.sh"
# shellcheck source=../..//bash-lib/lib/bashlib-command.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-command.sh"





# @internal
synopsis(){

cat << EOT

$(basename "$0") - One-Clik Self-Hosted Kubernetes on a single VPS

Usage:
\`\`\`bash
$(basename "$0") command opts
\`\`\`

Commands:

* build                           Build the image . You still needs to give the context as argument.

Global Options:

* -h --help                       Show this help message


EOT
}


# Assign the first argument to a string
COMMAND="${1:-}"
if [ "$COMMAND" = "" ]; then
    synopsis
    echo::err "A command is mandatory"
    exit 1
fi
shift  # Remove the first argument from the argument list

# Help Asked should not fail for the doc
# We test if before the error warning
if [[ $COMMAND =~ help|-h|--help ]]; then
  doc::help synopsis
  exit
fi

if [[ $COMMAND == "synopsis" ]]; then
  synopsis
  exit
fi




# Assign the rest of the arguments to an array
declare -a ARGS=()
ARGS=("$@")


case $COMMAND in
"shell")
    dock_x_shell "${ARGS[@]}" || error::exit $?
    ;;
*)
  doc::help synopsis
  echo::err "Command $COMMAND is unknown"
  exit 1
esac
